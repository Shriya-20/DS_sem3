//paranthesis


#include<iostream>
#include<string.h>
# define MAX 100
using namespace std;

class stack{
	
	public:
	int top;
	char str[MAX];
	
	stack()
	{
		top = -1;
	}
	
	void push(char a)
	{
		if(top >= (MAX-1))
		{
			cout << "Stack Overflow"<<endl;
		}
		else
		{
			top++;
			str[top] = a;
		}
		
	}
	void pop()
	{
		if(top == -1)
		{
			cout << "Stack Underflow"<< endl;
		}
		else
		{	
			top--;
		}
	}
	
	bool isEmpty()
	{
		if(top == -1)
			return true;
			
		else
			return false;
	}
	
//	bool isFull()
//	{
//		if(top == MAX)
//			return true;
//			
//		else 
//			return false;
//	}
	
//	char peek()
//	{
//		return str[top];
//	}
	
	void display()
	{
	cout<<"Stack elements: ";
	      
	      for(int i=top; i>=0; i--)
	      cout<<str[i]<<" ";
	      cout<<endl;
	}
};

int main()
{
	stack s;
	char s1[100];
	
	cout << "Enter an expression: ";
	gets(s1);
	
	for(int i =0 ; s1[i]!='\0';i++)
	{
		if(s1[i] == '(' || s1[i] == '{' || s1[i] == '[')
		{
			s.push(s1[i]);
		}
		
		else if(s1[i] == ')')
		{
			if ( s.isEmpty() == true || s1[i] == '{' || s1[i] == '[')
			{
				cout << "Invalid Expression"<<endl;
			}
			else
			{
				s.pop();
			}
		}
		
		else if(s1[i] == '}')
		{
			if ( s.isEmpty() == true || s1[i] == '(' || s1[i] == '[')
			{
				cout << "Invalid Expression"<<endl;
			}
			else
			{
				s.pop();
			}
		}
		
		else if(s1[i] == ']')
		{
			if ( s.isEmpty() == true || s1[i] == '(' || s1[i] == '{')
			{
				cout << "Invalid Expression"<<endl;
			}
			else
			{
				s.pop();	
			}
		}	
	}

		if(s.isEmpty() == true)
		{
			cout << "It is a valid expression" << endl;	
		}
		else
		{
			cout << "It is an invalid expression" << endl;
			s.display();
		}
		
		
				
	return 0;
}





//palindrome


#include <iostream>
#include <string.h>

using namespace std;
 
#define MAX 100

 
// Structure defining Stack data structure
class Stack{
	
	public:
	int top;
	char string[MAX];
	
	stack()
	{
		top = -1;
	}
 

bool isFull() 
{   
    if(top >= MAX-1)
        return true;
    else
        return false;
}
 

bool isEmpty() 
{
	 if(top == -1)
	     return true;
	 else
	     return false;
}
 

void push(int num) 
{
    if (isFull())
        cout << "Stack Overflow";
    else 
	{
		top++;
        string[top] = num;
        
    }
}
 
int pop() 
{
    if (isEmpty())
        cout << "Stack Underflow";
        
    else 
	{
     top--;
        return string[top+1];
    }
}
};

int main() 
{
    char inStr[100], c;
    int i, length;
    class Stack stack;
    
    cout << "Enter a string: ";
	gets(inStr);
    
    length = strlen(inStr);
    
    /* Push all characters of input String to Stack */
    for(i = 0; i < length; i++)
	{
        stack.push(inStr[i]);
    }
    
    /* Poping characters from stack returs the characters of input string
      in reverse order. We will then compare it with corresponding 
      characters of input string. If we found a mismatch the input 
      string is not a palindrome string */
      
    for(i = 0; i < length; i++)
	{
        if(stack.pop() != inStr[i]) 
		{
            cout << "Not Palindrome";
            return 0;
        }
    }
 
    cout << "Palindrome";
    return 0;
}





//postfi eval

#include <iostream>
using namespace std;

int main()
{
	string postExp;
	
	cout << "Enter a POSTFIX expression: ";
	cin >> postExp;
	
	int str[postExp.length()];
	int top = -1;
	
	for (int i=0; i<postExp.length(); i++)
	{
		if (postExp[i]>='0' and postExp[i]<='9')
			str[++top]= postExp[i]-'0';
		else
		{
			int a1 = str[top--];
			int a2 = str[top--];
			
			if (postExp[i]=='+')
				str[++top]=a2+a1;
				
			else if (postExp[i]=='-')
				str[++top]=a2-a1;
				
			else if (postExp[i]=='*')
				str[++top]=a2*a1;
				
			else if (postExp[i]=='/')
				str[++top]=a2/a1;
				
			else if (postExp[i]=='^')
				str[++top]=a2^a1;
		}
	}
	cout << "After Evaluation : " << str[0];
	return 0;
}


#include <iostream>
using namespace std;

int main()
{
	string preExp;
	
	cout << "Enter a POSTFIX expression: ";
	cin >> preExp;
	
	int str[preExp.length()];
	int top = -1;
	
	for (int i=preExp.length()-1; i>= 0; i--)
	{
		if (preExp[i]>='0' and preExp[i]<='9')
			str[++top]= preExp[i]-'0';
		else
		{
			int a1 = str[top--];
			int a2 = str[top--];
			
			if (preExp[i]=='+')
				str[++top]=a2+a1;
				
			else if (preExp[i]=='-')
				str[++top]=a2-a1;
				
			else if (preExp[i]=='*')
				str[++top]=a2*a1;
				
			else if (preExp[i]=='/')
				str[++top]=a2/a1;
				
			else if (preExp[i]=='^')
				str[++top]=a2^a1;
		}
	}
	cout << "After Evaluation : " << str[0];
	return 0;
}


//infi to postfi

#include <iostream>
#include <cstdio>
using namespace std;
#define MAX 100

class Stack {
    int top ;
    char arr[MAX];

    public:

    Stack(){
        top = -1;
    }

    bool isEmpty(){
        if(top == -1)
            return true;
        else
            return false;
    }

    bool isFull(){
        if(top == MAX)
            return true;
        else
            return false;
    }

    void push(char element)
    {
        if(isFull());
            
        else {
            top++;
            arr[top] = element;
            
        }
    }

    char pop()
    {
        if(isEmpty()){
            return -1;
        }
        else {
            return arr[top--];
        }
    }

    char peek(){ 
        return arr[top];
    }

    void display() {
  
      cout<<"Stack: ";

      for(int i = top; i >= 0; i--)
      cout << arr[i] << " ";
      cout << endl;
}

};


string infix2postfix(string infix);
string infix2prefix(string infix);
void reverseStr(string& str);
void swapChars(char& a, char& b);
void bracketsRev(string& str);

int main(){

    // string infix = "((a/b)+c)-(d+(e*f))";
    string infix;
    
    cout<< "Enter INFIX String: ";
    cin >> infix;
    
    string postfix = "";
    string prefix = "";

    cout << endl << "Infix:  " << infix << endl << endl;

    postfix = infix2postfix(infix);
    cout << "Postfix:  " << postfix << endl << endl;

    prefix = infix2prefix(infix);
    cout << "Prefix:  " << prefix << endl;

}

int priority(char alpha){
    
    if(alpha == '+' || alpha == '+')
        return 1;
    if(alpha == '*' || alpha == '/')
        return 2;
    if(alpha == '^')
        return 3;

        return -1;
}

string infix2postfix(string infix){

    int i = 0;
    string postfix;
    Stack s;
    char x;

    while(infix[i] != '\0')
    {

        //OPERAND
        if( infix[i] >= 'a' && infix[i] <= 'z' ||
            infix[i] >= 'A' && infix[i] <= 'Z' ||
            infix[i] >= '0' && infix[i] <= '9' )
        {
            postfix += infix[i];
        }

        //LEFT PARENTHESIS
        else if(infix[i] =='(') {
            s.push(infix[i]);
        }

        //RIGHT PARENTHESIS
        else if(infix[i] == ')') {
            while(s.peek() != '(' && !s.isEmpty()){
                postfix += s.pop();
            }
            s.pop();
        }

        //OPERATOR
        else{
            while(!s.isEmpty() && s.peek() != '(' && priority(infix[i]) <= priority(s.peek()) ){
                
                postfix += s.pop();
            }
            s.push(infix[i]);
        }
        i++;
    }
    
     while(!s.isEmpty()){
        postfix += s.pop();
    }
    return postfix;
}

string infix2prefix(string infix){

    reverseStr(infix);
    // cout << "Reverse:  " << infix << endl;
    
    bracketsRev(infix);
    // cout << "Reversing brackets:  " << infix << endl;
    infix = infix2postfix(infix);
    
    reverseStr(infix);
    
    return infix;
}

void reverseStr(string& str)
{
    int n = str.length();
 
    for (int i = 0; i < n / 2; i++){
        // char temp = str[i];
        // str[i] = str[ n-i-1];
        // str[n-i-1] = temp;
        swapChars(str[i] , str[n-i-1]);
        
    }
}

void swapChars(char& a, char& b)
{
        char tmp = a;
        a = b;
      b = tmp;
}

void bracketsRev(string& str){
    
    for (int i=0; i < str.length(); i++) {
        if(str[i] == '(') {
            str[i] = ')';
        }    
        else if(str[i] == ')') {
            str[i] = '(';
        }    
    }
}
	
	
