Q1.

#include <iostream>

using namespace std;

class Queue {
private:
    int front, rear, size;
    int* array;

public:
    Queue(int capacity) {
        size = capacity;
        front = rear = -1;
        array = new int[size];
    }

    bool isFull() {
        return (rear == size - 1);
    }

    bool isEmpty() {
        return (front == -1);
    }

    void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full. Cannot enqueue " << item << endl;
            return;
        }
        if (isEmpty()) {
            front = 0;
        }
        array[++rear] = item;
        cout << item << " enqueued to the queue." << endl;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return;
        }
        int item = array[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
        cout << item << " dequeued from the queue." << endl;
    }
};

int main() {
    int capacity;
    cout << "Enter the capacity of the queue: ";
    cin >> capacity;

    Queue queue(capacity);

    int choice;
    while (true) {
        cout << "1. Enqueue  2. Dequeue  3. Quit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int element;
                cout << "Enter the element to enqueue: ";
                cin >> element;
                queue.enqueue(element);
                break;
            }
            case 2:
                queue.dequeue();
                break;
            case 3:
                return 0;
            default:
                cout << "Invalid choice. Try again." << endl;
        }
    }

    return 0;
}


Q2

#include <iostream>
#include <string>

using namespace std;

class CircularQueue {
private:
    int front, rear, size, capacity;
    string* queue;

public:
    CircularQueue(int cap) {
        capacity = cap;
        size = 0;
        front = rear = -1;
        queue = new string[capacity];
    }

    bool isFull() {
        return (front == 0 && rear == capacity - 1) || (rear == front - 1);
    }

    bool isEmpty() {
        return front == -1;
    }

    void insert(string item) {
        if (isFull()) {
            cout << "Queue is full" << item << endl;
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % capacity;
        }
        queue[rear] = item;
        size++;
        cout << item << " inserted into the queue." << endl;
    }

    void del() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }
        string item = queue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % capacity;
        }
        size--;
        cout << item << " deleted" << endl;
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }

        int i = front;
        cout << "Queue elements: ";
        do {
            cout << queue[i] << " ";
            i = (i + 1) % capacity;
        } while (i != (rear + 1) % capacity);
        cout << endl;
    }
};

int main() {
    int capacity;
    cout << "Enter the capacity: ";
    cin >> capacity;

    CircularQueue cq(capacity);

    int choice;
    string element;

    while (true) {
        cout << "1. Insert  2. Delete  3. Display  4. Quit" << endl;
        cout << "Enter : ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the element to insert: ";
                cin >> element;
                cq.insert(element);
                break;
            case 2:
                cq.del();
                break;
            case 3:
                cq.display();
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice. Try again." << endl;
        }
    }

    return 0;
}

Q3
#include <iostream>
using namespace std;

class CircularQueue {
private:
    int *arr;
    int front, rear, size;

public:
    CircularQueue(int s) {
        size = s;
        arr = new int[s];
        front = rear = -1;
    }

    void enqueue(int item) {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1))) {
            cout << "Queue is full."<< endl;
            return;
        } else if (front == -1) {
            front = rear = 0;
            arr[rear] = item;
        } else if (rear == size - 1 && front != 0) {
            rear = 0;
            arr[rear] = item;
        } else {
            rear++;
            arr[rear] = item;
        }
        cout << "Enqueued: " << item << endl;
    }

    int dequeue() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        int item = arr[front];
        if (front == rear) {
            front = rear = -1;
        } else if (front == size - 1) {
            front = 0;
        } else {
            front++;
        }
        return item;
    }

    void display() {
        if (front == -1) {
            cout << "Queue is empty." << endl;
            return;
        }

        cout << "Elements in the queue are: ";
        if (rear >= front) {
            for (int i = front; i <= rear; i++)
                cout << arr[i] << " ";
        } else {
            for (int i = front; i < size; i++)
                cout << arr[i] << " ";
            for (int i = 0; i <= rear; i++)
                cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    q.display();

    int item = q.dequeue();
    if (item != -1)
        cout << "Dequeued: " << item << endl;


    return 0;
}
