Q1.
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) : data(val), next(NULL) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(NULL) {}

    static void insertAtHead(Node* &head, int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
    }

    static void insertAtTail(Node* &head, int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }

        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    static void display(Node* head) {
        Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    static void insertBefore(int key, int newData, Node* &head) {
        Node* newNode = new Node(newData);
        if (head == NULL) {
            cout << "List is empty. Cannot insert before a given element." << endl;
            return;
        }

        if (head->data == key) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* current = head;
        while (current->next != NULL && current->next->data != key) {
            current = current->next;
        }

        if (current->next == NULL) {
            cout << "Element " << key << " not found in the list." << endl;
        } else {
            newNode->next = current->next;
            current->next = newNode;
        }
    }

    void insertAfter(int key, int newData, Node* &head) {
        Node* newNode = new Node(newData);
        if (head == NULL) {
            cout << "List is empty. Cannot insert after a given element." << endl;
            return;
        }
        Node* current = head;
        while (current != NULL && current->data != key) {
            current = current->next;
        }

        if (current == NULL) {
            cout << "Element " << key << " not found in the list." << endl;
        } else {
            newNode->next = current->next;
            current->next = newNode;
        }
    }
    static void deleteElement(int value,Node* &head) {
        if (head == NULL) {
            cout << "List is empty. Cannot delete element." << endl;
            return;
        }

        if (head->data == value) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* current = head;
        while (current->next != NULL && current->next->data != value) {
            current = current->next;
        }

        if (current->next == NULL) {
            cout << "Element " << value << " not found in the list." << endl;
        } else {
            Node* temp = current->next;
            current->next = current->next->next;
            delete temp;
        }
    }
};

int main() {
    Node* head = NULL;
    int ch, x, y;

    while (true) {
        cout << "1. Insert at beginning" << endl;
        cout << "2. Insert at end" << endl;
        cout << "3. Insert before an element" << endl;
        cout << "4. Insert after an element" << endl;
        cout << "5. Delete an element" << endl;
        cout << "6. Print the list" << endl;
        cout << "7. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "Enter element: ";
                cin >> x;
                LinkedList::insertAtHead(head, x);
                cout << "Inserted" << endl;
                break;

            case 2:
                cout << "Enter element: ";
                cin >> x;
                LinkedList::insertAtTail(head, x);
                cout << "Inserted" << endl;
                break;

            case 3:
                cout << "Enter element before which data has to be added: ";
                cin >> x;
                cout << "Enter new element: ";
                cin >> y;
                LinkedList::insertBefore(x, y, head);
                cout << "Inserted" << endl;
                break;

            case 4:
                cout << "Enter element after which data has to be added: ";
                cin >> x;
                cout << "Enter new element: ";
                cin >> y;
                LinkedList().insertAfter(x, y, head);
                cout << "Inserted" << endl;
                break;
            case 5:
                cout << "Enter element: ";
                cin >> x;
                LinkedList::deleteElement(x,head);
                cout << "Deleted" << endl;
                break;
            case 6:
                LinkedList::display(head);
                break;
            case 7:
                return 0;
            default:
                cout << "Invalid Entry" << endl;
        }
    }
}

Q2.

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class Stack {
private:
    Node* top;

public:
    Stack() : top(nullptr) {}

    void push(int value) {
        Node* newNode = new Node(value);
        if (top == nullptr) {
            top = newNode;
        } else {
            newNode->next = top;
            top = newNode;
        }
    }

    void pop() {
        if (top == nullptr) {
            cout << "Stack is empty. Cannot pop." << endl;
        } else {
            Node* temp = top;
            top = top->next;
            delete temp;
        }
    }

    int peek() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return top->data;
    }

    bool isEmpty() {
        return top == nullptr;
    }
};

int main() {
    Stack stack;

    stack.push(1);
    stack.push(2);
    stack.push(3);

    cout << "Top of the stack: " << stack.peek() << endl;

    stack.pop();
    stack.pop();
    stack.pop();

    cout << "Is the stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}



#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class Queue {
private:
    Node* front;
    Node* rear;

public:
    Queue() : front(nullptr), rear(nullptr) {}

    void enqueue(int value) {
        Node* newNode = new Node(value);
        if (front == nullptr) {
            front = rear = newNode;
        } else {
            rear->next = newNode;
            rear = newNode;
        }
    }

    void dequeue() {
        if (front == nullptr) {
            cout << "Queue is empty. Cannot dequeue." << endl;
        } else {
            Node* temp = front;
            front = front->next;
            if (front == nullptr) {
                rear = nullptr;
            }
            delete temp;
        }
    }

    int peek() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return front->data;
    }

    bool isEmpty() {
        return front == nullptr;
    }
};

int main() {
    Queue queue;

    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);

    cout << "Front of the queue: " << queue.peek() << endl;

    queue.dequeue();
    queue.dequeue();
    queue.dequeue();

    cout << "Is the queue empty? " << (queue.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}
